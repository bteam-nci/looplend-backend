service: looplend-backend
useDotenv: true

frameworkVersion: '3'

plugins:
  - serverless-esbuild

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  timeout: 10
  architecture: arm64
  apiGateway:
    cors:
      origins:
        - '*'
      headers:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
      allowCredentials: false
  versionFunctions: false
  environment:
    DB_URL: ${env:DB_URL}
package:
  excludeDevDependencies: false
  individually: true

custom:
  esbuild:
    bundle: true
    target: node18
    minify: false
    external:
      - pg-query-stream
      - nock
      - mock-aws-s3
      - oracledb
      - mysql2
      - mysql
      - tedious
      - better-sqlite3
      - sqlite3

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        RestApiId:
          Ref: ApiGatewayRestApi
  Outputs:
    authorizerArn:
      Value: !GetAtt AuthorizerLambdaFunction.Arn
      Export:
        Name: authorizerArn
functions:
  - ${file(infra/user-functions.yml)}
  - ${file(infra/products-functions.yml)}
  - ${file(infra/conv-functions.yml)}
  - ${file(infra/wishlist-functions.yml)}
  - ${file(infra/rentals-functions.yml)}
